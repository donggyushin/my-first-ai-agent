from crewai.tools import BaseTool
from typing import Type
from pydantic import BaseModel, Field
import yfinance as yf
import datetime
import numpy as np

class StockAnalysisInput(BaseModel):
    """Input schema for advanced stock analysis tool."""
    ticker: str = Field(..., description="Stock ticker symbol (e.g., AAPL, BOIL, MSFT)")

class AdvancedStockAnalysisTool(BaseTool):
    name: str = "get_advanced_stock_analysis"
    description: str = "Get comprehensive stock analysis including technical indicators, financial metrics, and investment score"
    args_schema: Type[BaseModel] = StockAnalysisInput

    def _run(self, ticker: str) -> str:
        try:
            stock = yf.Ticker(ticker)
            info = stock.info
            
            # ÌòÑÏû¨ ÎÇ†Ïßú Í∞ÄÏ†∏Ïò§Í∏∞
            today = datetime.date.today().strftime("%Y-%m-%d")
            
            # Í∏∞Î≥∏ Ï†ïÎ≥¥
            current_price = info.get("regularMarketPrice") or info.get("currentPrice") or "N/A"
            company_name = info.get("longName", ticker)
            sector = info.get("sector", "N/A")
            industry = info.get("industry", "N/A")
            market_cap = info.get("marketCap", "N/A")
            
            # Í≥ºÍ±∞ Í∞ÄÍ≤© Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞ (Í∏∞Ïà†Ï†Å Î∂ÑÏÑùÏö©)
            hist = stock.history(period="6mo")  # 6Í∞úÏõî Îç∞Ïù¥ÌÑ∞
            
            if hist.empty:
                return f"‚ùå {ticker}Ïùò Í≥ºÍ±∞ Îç∞Ïù¥ÌÑ∞Î•º Í∞ÄÏ†∏Ïò¨ Ïàò ÏóÜÏäµÎãàÎã§."
            
            # Í∏∞Ïà†Ï†Å ÏßÄÌëú Í≥ÑÏÇ∞
            current_close = hist['Close'].iloc[-1]
            sma_20 = hist['Close'].rolling(window=20).mean().iloc[-1] if len(hist) >= 20 else None
            sma_50 = hist['Close'].rolling(window=50).mean().iloc[-1] if len(hist) >= 50 else None
            
            # RSI Í≥ÑÏÇ∞
            delta = hist['Close'].diff()
            gain = (delta.where(delta > 0, 0)).rolling(window=14).mean()
            loss = (-delta.where(delta < 0, 0)).rolling(window=14).mean()
            rs = gain / loss
            rsi = 100 - (100 / (1 + rs))
            current_rsi = rsi.iloc[-1] if not rsi.empty else None
            
            # Î≥ÄÎèôÏÑ± Í≥ÑÏÇ∞ (30Ïùº)
            returns = hist['Close'].pct_change().dropna()
            volatility = returns.rolling(window=30).std().iloc[-1] * np.sqrt(252) * 100 if len(returns) >= 30 else None
            
            # Í±∞ÎûòÎüâ Î∂ÑÏÑù
            avg_volume = hist['Volume'].rolling(window=20).mean().iloc[-1] if len(hist) >= 20 else None
            current_volume = hist['Volume'].iloc[-1]
            
            # Ïû¨Î¨¥ ÏßÄÌëú
            pe_ratio = info.get("trailingPE")
            pb_ratio = info.get("priceToBook")
            debt_to_equity = info.get("debtToEquity")
            if debt_to_equity:
                debt_to_equity = debt_to_equity / 100
            roe = info.get("returnOnEquity")
            if roe:
                roe = roe * 100
            profit_margin = info.get("profitMargins")
            if profit_margin:
                profit_margin = profit_margin * 100
            
            # Î∞∞Îãπ Ï†ïÎ≥¥
            dividend_yield = info.get("dividendYield")
            if dividend_yield:
                dividend_yield = dividend_yield * 100
            
            # Ï†êÏàò Í≥ÑÏÇ∞ ÏãúÏä§ÌÖú
            total_score = 0
            max_possible_score = 0
            score_breakdown = []
            
            # 1. Í∏∞Ïà†Ï†Å Î∂ÑÏÑù Ï†êÏàò (30Ï†ê)
            technical_score = 0
            max_possible_score += 30
            
            # RSI Î∂ÑÏÑù (10Ï†ê)
            if current_rsi is not None:
                if 40 <= current_rsi <= 60:
                    technical_score += 10
                    score_breakdown.append("‚úÖ RSI Í±¥Í∞ï (40-60 Î≤îÏúÑ): +10Ï†ê")
                elif 30 <= current_rsi <= 70:
                    technical_score += 7
                    score_breakdown.append("‚ö†Ô∏è RSI Î≥¥ÌÜµ (30-70 Î≤îÏúÑ): +7Ï†ê")
                elif current_rsi > 70:
                    technical_score += 3
                    score_breakdown.append("‚ö†Ô∏è RSI Í≥ºÎß§Ïàò (>70): +3Ï†ê")
                elif current_rsi < 30:
                    technical_score += 5
                    score_breakdown.append("‚ö†Ô∏è RSI Í≥ºÎß§ÎèÑ (<30): +5Ï†ê")
            else:
                score_breakdown.append("üìä RSI Îç∞Ïù¥ÌÑ∞ ÏóÜÏùå")
            
            # Ïù¥ÎèôÌèâÍ∑†ÏÑ† Î∂ÑÏÑù (10Ï†ê)
            if sma_20 is not None and sma_50 is not None:
                if current_close > sma_20 > sma_50:
                    technical_score += 10
                    score_breakdown.append("‚úÖ Í∞ïÌïú ÏÉÅÏäπ Ï∂îÏÑ∏ (Í∞ÄÍ≤© > SMA20 > SMA50): +10Ï†ê")
                elif current_close > sma_20:
                    technical_score += 7
                    score_breakdown.append("‚úÖ Îã®Í∏∞ ÏÉÅÏäπ Ï∂îÏÑ∏ (Í∞ÄÍ≤© > SMA20): +7Ï†ê")
                elif current_close > sma_50:
                    technical_score += 5
                    score_breakdown.append("‚ö†Ô∏è Ï§ëÏû•Í∏∞ ÏÉÅÏäπ (Í∞ÄÍ≤© > SMA50): +5Ï†ê")
                else:
                    technical_score += 2
                    score_breakdown.append("‚ö†Ô∏è ÌïòÎùΩ Ï∂îÏÑ∏: +2Ï†ê")
            else:
                score_breakdown.append("üìä Ïù¥ÎèôÌèâÍ∑†ÏÑ† Îç∞Ïù¥ÌÑ∞ Î∂ÄÏ°±")
            
            # Í±∞ÎûòÎüâ Î∂ÑÏÑù (10Ï†ê)
            if current_volume and avg_volume:
                volume_ratio = current_volume / avg_volume
                if volume_ratio > 1.5:
                    technical_score += 8
                    score_breakdown.append("‚úÖ ÎÜíÏùÄ Í±∞ÎûòÎüâ (ÌèâÍ∑† ÎåÄÎπÑ 1.5Î∞∞ Ïù¥ÏÉÅ): +8Ï†ê")
                elif volume_ratio > 1.2:
                    technical_score += 6
                    score_breakdown.append("‚úÖ Ï¶ùÍ∞ÄÎêú Í±∞ÎûòÎüâ (ÌèâÍ∑† ÎåÄÎπÑ 1.2Î∞∞ Ïù¥ÏÉÅ): +6Ï†ê")
                elif volume_ratio > 0.8:
                    technical_score += 5
                    score_breakdown.append("‚ö†Ô∏è Î≥¥ÌÜµ Í±∞ÎûòÎüâ: +5Ï†ê")
                else:
                    technical_score += 3
                    score_breakdown.append("‚ö†Ô∏è ÎÇÆÏùÄ Í±∞ÎûòÎüâ: +3Ï†ê")
            
            total_score += technical_score
            
            # 2. Î∞∏Î•òÏóêÏù¥ÏÖò Ï†êÏàò (25Ï†ê)
            valuation_score = 0
            max_possible_score += 25
            
            # PE ÎπÑÏú® Î∂ÑÏÑù (15Ï†ê)
            if pe_ratio and pe_ratio > 0:
                if pe_ratio < 15:
                    valuation_score += 15
                    score_breakdown.append(f"‚úÖ Ï†ÄÌèâÍ∞Ä PER ({pe_ratio:.1f}): +15Ï†ê")
                elif pe_ratio < 25:
                    valuation_score += 10
                    score_breakdown.append(f"‚úÖ Ï†ÅÏ†ï PER ({pe_ratio:.1f}): +10Ï†ê")
                elif pe_ratio < 35:
                    valuation_score += 5
                    score_breakdown.append(f"‚ö†Ô∏è ÎÜíÏùÄ PER ({pe_ratio:.1f}): +5Ï†ê")
                else:
                    valuation_score += 2
                    score_breakdown.append(f"‚ö†Ô∏è Îß§Ïö∞ ÎÜíÏùÄ PER ({pe_ratio:.1f}): +2Ï†ê")
            else:
                score_breakdown.append("üìä PER Îç∞Ïù¥ÌÑ∞ ÏóÜÏùå")
            
            # PB ÎπÑÏú® Î∂ÑÏÑù (10Ï†ê)
            if pb_ratio and pb_ratio > 0:
                if pb_ratio < 1:
                    valuation_score += 10
                    score_breakdown.append(f"‚úÖ Ï†ÄÌèâÍ∞Ä PBR ({pb_ratio:.1f}): +10Ï†ê")
                elif pb_ratio < 3:
                    valuation_score += 7
                    score_breakdown.append(f"‚úÖ Ï†ÅÏ†ï PBR ({pb_ratio:.1f}): +7Ï†ê")
                elif pb_ratio < 5:
                    valuation_score += 4
                    score_breakdown.append(f"‚ö†Ô∏è ÎÜíÏùÄ PBR ({pb_ratio:.1f}): +4Ï†ê")
                else:
                    valuation_score += 1
                    score_breakdown.append(f"‚ö†Ô∏è Îß§Ïö∞ ÎÜíÏùÄ PBR ({pb_ratio:.1f}): +1Ï†ê")
            else:
                score_breakdown.append("üìä PBR Îç∞Ïù¥ÌÑ∞ ÏóÜÏùå")
            
            total_score += valuation_score
            
            # 3. Ïû¨Î¨¥ Í±¥Ï†ÑÏÑ± Ï†êÏàò (25Ï†ê)
            financial_score = 0
            max_possible_score += 25
            
            # Î∂ÄÏ±ÑÎπÑÏú® (8Ï†ê)
            if debt_to_equity is not None:
                if debt_to_equity < 0.3:
                    financial_score += 8
                    score_breakdown.append(f"‚úÖ Ïö∞ÏàòÌïú Î∂ÄÏ±ÑÎπÑÏú® ({debt_to_equity:.1f}): +8Ï†ê")
                elif debt_to_equity < 0.6:
                    financial_score += 6
                    score_breakdown.append(f"‚úÖ ÏñëÌò∏Ìïú Î∂ÄÏ±ÑÎπÑÏú® ({debt_to_equity:.1f}): +6Ï†ê")
                elif debt_to_equity < 1.0:
                    financial_score += 4
                    score_breakdown.append(f"‚ö†Ô∏è Î≥¥ÌÜµ Î∂ÄÏ±ÑÎπÑÏú® ({debt_to_equity:.1f}): +4Ï†ê")
                else:
                    financial_score += 2
                    score_breakdown.append(f"‚ö†Ô∏è ÎÜíÏùÄ Î∂ÄÏ±ÑÎπÑÏú® ({debt_to_equity:.1f}): +2Ï†ê")
            
            # ROE (8Ï†ê)
            if roe is not None:
                if roe > 20:
                    financial_score += 8
                    score_breakdown.append(f"‚úÖ Ïö∞ÏàòÌïú ROE ({roe:.1f}%): +8Ï†ê")
                elif roe > 15:
                    financial_score += 6
                    score_breakdown.append(f"‚úÖ ÏñëÌò∏Ìïú ROE ({roe:.1f}%): +6Ï†ê")
                elif roe > 10:
                    financial_score += 4
                    score_breakdown.append(f"‚ö†Ô∏è Î≥¥ÌÜµ ROE ({roe:.1f}%): +4Ï†ê")
                else:
                    financial_score += 2
                    score_breakdown.append(f"‚ö†Ô∏è ÎÇÆÏùÄ ROE ({roe:.1f}%): +2Ï†ê")
            
            # ÏàúÏù¥ÏùµÎ•† (9Ï†ê)
            if profit_margin is not None:
                if profit_margin > 20:
                    financial_score += 9
                    score_breakdown.append(f"‚úÖ Ïö∞ÏàòÌïú ÏàúÏù¥ÏùµÎ•† ({profit_margin:.1f}%): +9Ï†ê")
                elif profit_margin > 10:
                    financial_score += 7
                    score_breakdown.append(f"‚úÖ ÏñëÌò∏Ìïú ÏàúÏù¥ÏùµÎ•† ({profit_margin:.1f}%): +7Ï†ê")
                elif profit_margin > 5:
                    financial_score += 4
                    score_breakdown.append(f"‚ö†Ô∏è Î≥¥ÌÜµ ÏàúÏù¥ÏùµÎ•† ({profit_margin:.1f}%): +4Ï†ê")
                else:
                    financial_score += 2
                    score_breakdown.append(f"‚ö†Ô∏è ÎÇÆÏùÄ ÏàúÏù¥ÏùµÎ•† ({profit_margin:.1f}%): +2Ï†ê")
            
            total_score += financial_score
            
            # 4. Î¶¨Ïä§ÌÅ¨ Ï†êÏàò (20Ï†ê)
            risk_score = 20  # Í∏∞Î≥∏ Ï†êÏàòÏóêÏÑú Î¶¨Ïä§ÌÅ¨ ÏöîÏù∏ Ï∞®Í∞ê
            
            # Î≥ÄÎèôÏÑ± Î∂ÑÏÑù
            if volatility is not None:
                if volatility > 50:
                    risk_score -= 10
                    score_breakdown.append(f"‚ö†Ô∏è ÎÜíÏùÄ Î≥ÄÎèôÏÑ± ({volatility:.1f}%): -10Ï†ê")
                elif volatility > 30:
                    risk_score -= 5
                    score_breakdown.append(f"‚ö†Ô∏è Î≥¥ÌÜµ Î≥ÄÎèôÏÑ± ({volatility:.1f}%): -5Ï†ê")
                else:
                    score_breakdown.append(f"‚úÖ ÎÇÆÏùÄ Î≥ÄÎèôÏÑ± ({volatility:.1f}%): 0Ï†ê")
            
            total_score += max(risk_score, 0)
            
            # ÏµúÏ¢Ö Ï†êÏàò Í≥ÑÏÇ∞ (Î∞±Î∂ÑÏú®)
            if max_possible_score > 0:
                final_score = int((total_score / max_possible_score) * 100)
            else:
                final_score = 0
            
            # Ìà¨Ïûê Îì±Í∏â Í≤∞Ï†ï
            if final_score >= 80:
                investment_grade = "A+ (Í∞ïÌïú Îß§Ïàò)"
                recommendation = "Ï†ÅÍ∑π Îß§Ïàò Ï∂îÏ≤ú"
            elif final_score >= 70:
                investment_grade = "A (Îß§Ïàò)"
                recommendation = "Îß§Ïàò Ï∂îÏ≤ú"
            elif final_score >= 60:
                investment_grade = "B+ (ÏïΩÍ∞Ñ Îß§Ïàò)"
                recommendation = "Ïã†Ï§ëÌïú Îß§Ïàò Í≥†Î†§"
            elif final_score >= 50:
                investment_grade = "B (Ï§ëÎ¶Ω)"
                recommendation = "Í¥ÄÎßù"
            elif final_score >= 40:
                investment_grade = "C+ (ÏïΩÍ∞Ñ Îß§ÎèÑ)"
                recommendation = "Ïã†Ï§ëÌïú Îß§ÎèÑ Í≥†Î†§"
            elif final_score >= 30:
                investment_grade = "C (Îß§ÎèÑ)"
                recommendation = "Îß§ÎèÑ Í∂åÏû•"
            else:
                investment_grade = "D (Í∞ïÌïú Îß§ÎèÑ)"
                recommendation = "Ï†ÅÍ∑π Îß§ÎèÑ Í∂åÏû•"
            
            # Ìè¨Îß∑ Ìï®Ïàò
            def format_number(num):
                if isinstance(num, (int, float)):
                    if num >= 1e12:
                        return f"${num/1e12:.2f}Ï°∞"
                    elif num >= 1e9:
                        return f"${num/1e9:.2f}Ïã≠Ïñµ"
                    elif num >= 1e6:
                        return f"${num/1e6:.2f}Î∞±Îßå"
                    else:
                        return f"${num:,.0f}"
                return num
            
            # Ìè¨Îß∑ÌåÖ Ìï®ÏàòÎì§
            def format_float(value, decimals=1):
                return f"{value:.{decimals}f}" if value is not None else 'N/A'
            
            def format_currency(value, decimals=2):
                return f"${value:.{decimals}f}" if value is not None else 'N/A'
            
            # Í≤∞Í≥º Ï∂úÎ†•
            result = f"""
üöÄ Ï¢ÖÌï© Ï£ºÏãù Î∂ÑÏÑù Î≥¥Í≥†ÏÑú: {company_name} ({ticker})
=======================================================
üìä Ï¢ÖÌï© Ìà¨Ïûê Ï†êÏàò: {final_score}/100
üéØ Ìà¨Ïûê Îì±Í∏â: {investment_grade}
üí° Ìà¨Ïûê Í∂åÍ≥†: {recommendation}

üìà Í∏∞Î≥∏ Ï†ïÎ≥¥:
‚Ä¢ ÌòÑÏû¨Í∞Ä: ${current_price} ({today} Í∏∞Ï§Ä)
‚Ä¢ ÏóÖÏ¢Ö: {sector} - {industry}
‚Ä¢ ÏãúÍ∞ÄÏ¥ùÏï°: {format_number(market_cap)}

üîç Í∏∞Ïà†Ï†Å ÏßÄÌëú:
‚Ä¢ RSI: {format_float(current_rsi)}
‚Ä¢ SMA20: {format_currency(sma_20)}
‚Ä¢ SMA50: {format_currency(sma_50)}
‚Ä¢ Î≥ÄÎèôÏÑ± (Ïó∞ÌôòÏÇ∞): {format_float(volatility)}%

üí∞ Î∞∏Î•òÏóêÏù¥ÏÖò:
‚Ä¢ PER: {format_float(pe_ratio)}
‚Ä¢ PBR: {format_float(pb_ratio)}
‚Ä¢ Î∞∞ÎãπÏàòÏùµÎ•†: {format_float(dividend_yield, 2)}%

üè¶ Ïû¨Î¨¥ ÏßÄÌëú:
‚Ä¢ Î∂ÄÏ±ÑÎπÑÏú®: {format_float(debt_to_equity, 2)}
‚Ä¢ ROE: {format_float(roe)}%
‚Ä¢ ÏàúÏù¥ÏùµÎ•†: {format_float(profit_margin)}%

üìä Ï†êÏàò ÏÉÅÏÑ∏ Î∂ÑÏÑù:
"""
            
            for breakdown in score_breakdown:
                result += f"‚Ä¢ {breakdown}\n"
            
            result += f"""
üéØ Ìà¨Ïûê Í∞ÄÏù¥Îìú:
‚Ä¢ 80-100Ï†ê: Îß§Ïö∞ Ïö∞ÏàòÌïú Ìà¨Ïûê Í∏∞Ìöå
‚Ä¢ 70-79Ï†ê: Ï¢ãÏùÄ Ìà¨Ïûê Í∏∞Ìöå
‚Ä¢ 60-69Ï†ê: Î≥¥ÌÜµ, Ïã†Ï§ëÌïú Í≤ÄÌÜ† ÌïÑÏöî
‚Ä¢ 50-59Ï†ê: Ï§ëÎ¶Ω, Îã§Î•∏ ÏòµÏÖò Í≥†Î†§
‚Ä¢ 40-49Ï†ê: Ìà¨Ïûê Î¶¨Ïä§ÌÅ¨ ÎÜíÏùå
‚Ä¢ 40Ï†ê ÎØ∏Îßå: Ìà¨Ïûê ÎπÑÏ∂îÏ≤ú

‚ö†Ô∏è Î©¥Ï±Ö Ï°∞Ìï≠:
Î≥∏ Î∂ÑÏÑùÏùÄ Ï∞∏Í≥†Ïö©Ïù¥Î©∞ Ìà¨Ïûê Í≤∞Ï†ïÏùÄ Î≥∏Ïù∏ Ï±ÖÏûÑÏûÖÎãàÎã§.
Ï∂îÍ∞Ä Î¶¨ÏÑúÏπòÏôÄ Ï†ÑÎ¨∏Í∞Ä ÏÉÅÎã¥ÏùÑ Í∂åÏû•Ìï©ÎãàÎã§.

‚Äª Îç∞Ïù¥ÌÑ∞ Ï∂úÏ≤ò: Yahoo Finance (Ïã§ÏãúÍ∞Ñ)
‚Äª Î∂ÑÏÑù ÎÇ†Ïßú: {today}
"""
            
            return result
            
        except Exception as e:
            return f"‚ùå Ï£ºÏãù Î∂ÑÏÑù Ïã§Ìå® ({ticker}): {str(e)}\n‚Äª Ïò¨Î∞îÎ•∏ Ìã∞Ïª§ Ïã¨Î≥ºÏùÑ ÏûÖÎ†•ÌñàÎäîÏßÄ ÌôïÏù∏ÌïòÏÑ∏Ïöî."

# Tool instance
get_advanced_stock_analysis = AdvancedStockAnalysisTool()